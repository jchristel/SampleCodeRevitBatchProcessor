"""
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This module contains a number of helper functions to record exported file information.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The information stored is used in the post process to generate a transmittal for the document management platform (aconex in this case)

For information stored refer to class docFile.get_data method

"""

#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# License:
#
#
# Revit Batch Processor Sample Code
#
# Copyright (c) 2020  Jan Christel
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# --------------------------
# Imports
#

import os
from duHast.Utilities.files_csv import write_report_data_as_csv
from duHast.Utilities.Objects import result as res


def write_out_export_file_data(
    export_status,
    message,
    marker_file_extension,
    file_extension,
    root_path,
    file_data,
    current_file_revision,
):
    """

    Writes meta data of exported files to disk for further processing at end of flow.

    :param export_status: Result class instance generated by the export process.
    :type export_status: :class:`.Result`
    :param message: Short message describing task.
    :type message: str
    :param marker_file_extension: the marker file extension. (i.e. ".extension")
    :type marker_file_extension: str
    :param file_extension: Exported file type extension. (i.e. ".ifc")
    :type file_extension: str
    :param root_path: Directory path to where to write the marker file.
    :type root_path: str
    :param file_data: List of `docFile` instances containing all known file meta data
    :type file_data: [:class:`.docFile`]
    :param current_file_revision: The current file revision.
    :type current_file_revision: str

    :return:
        Result class instance.

        - Write to file status returned in result.status. False if an exception occurred, otherwise True.
        - result.message will contain message marker text and status as string.
        - result.result will be an empty list

        On exception:

        - result.status (bool) will be False.
        - result.message will contain the exception message.
        - result.result will be an empty list.

    :rtype: :class:`.Result`
    """

    return_value = res.Result()
    if export_status.status == True:
        if export_status.result is not None and len(export_status.result) > 0:
            for export_name in export_status.result:
                # strip extension of export file name
                export_file_name = export_name[1][0:-4]
                # get the file extension including .
                export_extension = export_name[1][-4:]
                data = get_file_data_by_file_extension_and_file_name(
                    export_file_name=export_file_name,
                    file_extension=file_extension,
                    file_data=file_data,
                    current_file_revision=current_file_revision,
                )
                if len(data) > 0:
                    file_name = os.path.join(
                        root_path,
                        export_file_name + export_extension + marker_file_extension,
                    )
                    try:
                        write_report_data_as_csv(
                            file_name=file_name, header=[], data=[data]
                        )
                        return_value.append_message(
                            "Successfully wrote export file data to: {}".format(
                                file_name
                            )
                        )
                    except Exception as e:
                        return_value.update_sep(
                            False,
                            "failed to write export file data with exception: {}".format(
                                e
                            ),
                        )
                else:
                    return_value.update_sep(
                        False,
                        "Failed to write marker file: No file data found for exported file: {}".format(
                            export_file_name
                        ),
                    )
        else:
            return_value.update_sep(
                False,
                "Failed to write export marker files for: {}. No export file names provided".format(
                    message
                ),
            )
    else:
        return_value.update_sep(
            False,
            "Failed to write export marker files for: {}. Export failed!".format(
                message
            ),
        )

    return return_value


def get_file_data_by_file_extension_and_file_name(
    export_file_name, file_extension, file_data, current_file_revision
):
    """

    Returns a list containing file meta data based on the file extension and file name (with out extension) past in.

    :param export_file_name: The export file name without extension
    :type export_file_name: str
    :param file_extension: The file extension in format '.extension'
    :type file_extension: str
    :param file_data: List of `docFile` instances containing all known file meta data
    :type file_data: [:class:`.docFile`]
    :param current_file_revision: The current file revision.
    :type current_file_revision: str

    :return: List containing file meta data if a match was found, otherwise empty list. (For list content refer to docFile.get_data())
    :rtype: [str]
    """

    return_value = []
    # get all file data with extension match
    filtered_data_by_file_extension = []
    for fd in file_data:
        if fd.file_extension == file_extension:
            filtered_data_by_file_extension.append(fd)
    # flag: there are edge cases where the initial view name does not match the output file name
    # if flag is still false after first test...check the aconex doc number property for a match
    found_match = False
    for fdf in filtered_data_by_file_extension:
        if export_file_name.startswith(fdf.existing_file_name):
            # update revision to match revit file revision before writing out marker file
            fdf.revision = current_file_revision
            return_value = fdf.get_data()
            found_match = True
            break
    # check aconex doc number property in edge case...
    if found_match == False:
        for fdf in filtered_data_by_file_extension:
            if export_file_name.startswith(fdf.aconex_doc_number):
                # update revision to match revit file revision before writing out marker file
                fdf.revision = current_file_revision
                return_value = fdf.get_data()
                break
    return return_value
